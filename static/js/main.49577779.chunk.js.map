{"version":3,"sources":["styles/globalStyles.js","components/Input/Input.jsx","components/Button/Button.jsx","App.js","serviceWorker.js","index.js"],"names":["colors","GlobalStyle","createGlobalStyle","_templateObject","Input","styled","input","Input_templateObject","Button","button","Button_templateObject","AppContainer","div","App_templateObject","Text","_templateObject2","StyledTitle","h2","_templateObject3","App","SNIPPETS","id","text","title","_useState","useState","_useState2","Object","slicedToArray","snippet","setSnippet","_useState3","_useState4","userText","setUserText","_useState5","victory","startTime","endTime","_useState6","gameState","setGameState","react_default","a","createElement","Input_Input","value","onChange","event","target","objectSpread","Date","getTime","autoFocus","concat","map","SNIPPET","index","Button_Button","onClick","snippetIndex","key","globalStyles","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gcAEA,IAYMA,EACO,UADPA,EAIG,UAKMC,EArBKC,YAAHC,+NCCjB,IAWeC,EAXDC,IAAOC,MAAVC,IAIUP,0QCJrB,IAYeQ,EAZAH,IAAOI,OAAVC,IAMUV,EACAA,0UCJtB,IAAMW,EAAeN,IAAOO,IAAVC,KAGZC,EAAOT,IAAOO,IAAVG,KAMJC,EAAcX,IAAOY,GAAVC,IACNlB,GA8DImB,EA1DH,WACV,IACMC,EAAW,CACf,CACEC,GAAI,EACJC,KAAM,qCACNC,MAAO,UAET,CACEF,GAAI,EACJC,KAAM,4CACNC,MAAO,gBAET,CACEF,GAAI,EACJC,KAAM,oDACNC,MAAO,gBAhBKC,EAmBcC,mBAAS,IAnBvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAmBTK,EAnBSH,EAAA,GAmBAI,EAnBAJ,EAAA,GAAAK,EAoBgBN,mBAAS,IApBzBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAoBTE,EApBSD,EAAA,GAoBCE,EApBDF,EAAA,GAAAG,EAqBkBV,mBApBP,CAAEW,SAAS,EAAOC,UAAW,KAAMC,QAAS,OADvDC,EAAAZ,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAqBTK,EArBSD,EAAA,GAqBEE,EArBFF,EAAA,GAuChB,OACEG,EAAAC,EAAAC,cAACjC,EAAD,KACE+B,EAAAC,EAAAC,cAAC5B,EAAD,mBACEwB,EAAUH,WAAaK,EAAAC,EAAAC,cAAC9B,EAAD,iDACzB4B,EAAAC,EAAAC,cAAC9B,EAAD,KAAOe,EAAQP,MACdO,GAAWa,EAAAC,EAAAC,cAACC,EAAD,CAAOC,MAAOb,EAAUc,SArBjB,SAAAC,GACrBd,EAAYc,EAAMC,OAAOH,OACrBE,EAAMC,OAAOH,QAAUjB,EAAQP,MACjCmB,EAAad,OAAAuB,EAAA,EAAAvB,CAAA,GACRa,EADO,CAEVJ,SAAS,EACTE,SAAS,IAAIa,MAAOC,UAAYZ,EAAUH,cAekBgB,WAAS,IACvEX,EAAAC,EAAAC,cAAA,UAAKJ,EAAUJ,QAAV,4BAAAkB,OAAsCd,EAAUF,QAAU,IAA1D,KAAoE,MAEvElB,EAASmC,IAAI,SAACC,EAASC,GAAV,OACXf,EAAAC,EAAAC,cAACc,EAAD,CAAQC,SAdMC,EAciBH,EAdD,WACpC3B,EAAWV,EAASwC,IACpBnB,EAAad,OAAAuB,EAAA,EAAAvB,CAAA,GAAKa,EAAN,CAAiBH,WAAW,IAAIc,MAAOC,eAYNS,IAAKL,EAAQnC,IACjDmC,EAAQjC,OAfG,IAAAqC,IAmBlBlB,EAAAC,EAAAC,cAACkB,EAAD,QC7DcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.49577779.chunk.js","sourcesContent":["import {createGlobalStyle} from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    font-family: 'Lato', sans-serif;\r\n    background-color: #0B0C10;\r\n    color: white;\r\n  }\r\n\r\n  body * {\r\n    box-sizing: border-box;\r\n  }\r\n`\r\n\r\nconst colors = {\r\n  woodsmoke: '#0B0C10',\r\n  ebonyClay: '#1F2833',\r\n  silverSand: '#C5C6C7',\r\n  spray: '#66F6F1',\r\n  keppel: '#45A29E'\r\n}\r\n\r\nexport {colors};\r\nexport default GlobalStyle;","import styled from 'styled-components'\r\nimport { colors } from '../../styles/globalStyles'\r\n\r\nconst Input = styled.input`\r\n  height: 46px;\r\n  min-width: 300px;\r\n  font-size: 16px;\r\n  border 1px solid ${colors.spray};\r\n  padding: 13px 15px;\r\n  &:focus {\r\n    border-size: 2px;\r\n  }\r\n`;\r\n\r\nexport default Input;","import styled from 'styled-components'\r\nimport { colors } from '../../styles/globalStyles'\r\n\r\nconst Button = styled.button`\r\n  box-sizing: border-box;\r\n  height: 36px;\r\n  padding: 5px 10px;\r\n  font-size: 16px;\r\n  min-width: 50px;\r\n  border: 1px solid ${colors.spray};\r\n  background-color: ${colors.woodsmoke}\r\n  color: white;\r\n  margin: 0 5px;\r\n`;\r\n\r\nexport default Button;","import React, { useState } from 'react';\nimport styled from 'styled-components'\nimport Input from './components/Input'\nimport Button from './components/Button/Button';\nimport GlobalStyle, { colors } from './styles/globalStyles';\n\nconst AppContainer = styled.div `\n  text-align: center;\n`\nconst Text = styled.div`\n  display: block;\n  margin: 15px;\n  font-size: 20px;\n`\n\nconst StyledTitle = styled.h2 `\n  color: ${colors.spray};\n  font-size: 50px;\n`\n\nconst App = () => {\n  const INITIAL_GAME_STATE = { victory: false, startTime: null, endTime: null };\n  const SNIPPETS = [ \n    {\n      id: 1,\n      text: 'Bears, beets, battlestar galactica',\n      title: 'Bears!'\n    },\n    {\n      id: 2,\n      text: 'What\\'s Forrest Gump\\'s password? 1Forrest1',\n      title: 'Forrest Gump'\n    },\n    {\n      id: 3,\n      text: 'Where do programmers like to hangout? The Foo Bar',\n      title: 'Programmers'\n    },\n  ];\n  const [snippet, setSnippet] = useState('');\n  const [userText, setUserText] = useState('');\n  const [gameState, setGameState] = useState(INITIAL_GAME_STATE);\n\n  const updateUserText = event => {\n    setUserText(event.target.value);\n    if (event.target.value === snippet.text) {\n      setGameState({\n        ...gameState,\n        victory: true,\n        endTime: new Date().getTime() - gameState.startTime\n      });\n    }\n  }\n\n  const chooseSnippet = snippetIndex => () => {\n    setSnippet(SNIPPETS[snippetIndex]);\n    setGameState({ ...gameState, startTime: new Date().getTime() });\n  };\n\n  return (\n    <AppContainer>\n      <StyledTitle>Type Race</StyledTitle>\n      {!gameState.startTime && <Text>Choose a text snippet to start the race!</Text> }\n      <Text>{snippet.text}</Text>\n      {snippet && <Input value={userText} onChange={updateUserText} autoFocus ></Input>}\n      <h4>{gameState.victory ? `Done! ðŸŽ‰ Time: ${gameState.endTime / 1000}s` : null}</h4>\n      {\n        SNIPPETS.map((SNIPPET, index) => (\n          <Button onClick={chooseSnippet(index)} key={SNIPPET.id}>\n            {SNIPPET.title}\n          </Button>\n        ))\n      }\n      <GlobalStyle />\n    </AppContainer>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}